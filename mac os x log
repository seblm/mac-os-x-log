# update or set environment variable for bash shell (default Mac OS X Terminal)
$ export PATH=${PATH}:/usr/local/opt/ruby/bin

# installation de groovy
$ brew install groovy

# install homebrew
$ ruby -e "$(curl -fsSkL raw.github.com/mxcl/homebrew/go)"
$ vi /etc/launchd.conf (/usr/bin:/bin:/usr/sbin:/sbin are values defined by default in /etc/paths) - used by process which do not inherit from shell
  setenv PATH /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin
$ vi /etc/paths - used by process which inherit from shell
  add /usr/local/bin at the top of file

# update brew formulae
$ brew update
# réparation après un brew update : "Error: Failure while executing: git checkout -q master"
$ cd /usr/local
$ git reset --hard FETCH_HEAD
# upgrade all brew softwares
$ brew upgrade

# git
# setting email in git
$ git config --global user.email "me@here.com"
# activating colors
$ git config --global color.ui true
# création d'un repository
$ cd my-directory/ && git init
# premier checkout d'un repository github existant
$ git clone git@github.com:<user>/<project>.git
# ajout des modifications sur le repository distant
$ git push
# synchroniser un repository (pull fait un fetch puis un merge avec rebasage)
$ git pull --rebase origin master
# création d'une branche
$ git branch <nom-branche>
# push a local branch to a distant repository
$ git push origin <branch-name>
# deleting branch
$ git branch --delete <branch-name>
# mise à jour de la branche courante avec une branche b1
$ git merge b1
# rejouer une liste de commits (les trois derniers par exemple)
$ git rebase --interactive HEAD~3
# lister toutes les branches, même celles qui sont cachées
$ git branch -a
# travailler sur la copie locale d'une branche distante existante
$ git checkout -b experimental origin/experimental
# partager un projet github
# git remote add origin git@github.com:seblm/poker-hands-kata.git
# git push -u origin master
# pousser des modifications temporaires
$ git stash
# ou
$ git stash save "reason"
# créer une branche à partir d'un stash
$ git stash branch <nom-branche>
# réintégrer ces modifications
$ git stash pop
# visualiser la pile des modifications
$ git stash list
# créer une branche à partir des changements non commités
$ git checkout -b <nom-branche>
$ git add (...) && git commit (...)
# synchroniser la gestion des issues github
$ git commit -m "#issue-id"
$ git commit -m "Closes #issue-id"

# merger un fork : https://help.github.com/articles/syncing-a-fork
$ git remote add upstream https://github.com/otheruser/repo.git
$ git fetch upstream
$ git merge upstream/master

# créer un repository sur une clé
$ cd ~/Documents/workspace/miw-automatic-mower
$ mkdir -p /Volumes/LaCie/git/miw-automatic-mower/
$ git clone --local --no-hardlinks --bare . /Volumes/LaCie/git/miw-automatic-mower
$ git remote add usb file:///Volumes/LaCie/git/miw-automatic-mower
# envoi des modifications suivantes
$ git push usb
# mise à jour depuis le repository
$ git pull --rebase usb master
#
# sur un autre ordinateur
$ git clone file:///Volumes/LaCie/git/miw-automatic-mower
# mise à jour
$ git pull --rebase origin

# GitX-dev install
$ wget https://github.com/downloads/rowanj/gitx/GitX-dev-57.dmg
# double-click on file and drop GitX to /Applications
$ cd /usr/local/bin
$ ln -s /Applications/GitX.app/Contents/Resources/gitx

# installation de PostgreSQL (9.1.2)
$ brew install PostgreSQL
# initialiser une base de données
$ initdb /usr/local/var/postgres
# démarrer ou arrêter PostgreSQL
#  If this is your first install, automatically load on login with:
$  mkdir -p ~/Library/LaunchAgents
$  cp /usr/local/Cellar/postgresql/9.1.2/org.postgresql.postgres.plist ~/Library/LaunchAgents/
$  launchctl load -w ~/Library/LaunchAgents/org.postgresql.postgres.plist
#  If this is an upgrade and you already have the org.postgresql.postgres.plist loaded:
$  launchctl unload -w ~/Library/LaunchAgents/org.postgresql.postgres.plist
$  cp /usr/local/Cellar/postgresql/9.1.2/org.postgresql.postgres.plist ~/Library/LaunchAgents/
$  launchctl load -w ~/Library/LaunchAgents/org.postgresql.postgres.plist
#  Or start manually with:
$  pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start
#  And stop with:
$  pg_ctl -D /usr/local/var/postgres stop -s -m fast
# créer une base de données
$ /usr/local/Cellar/postgresql/9.1.2/bin/createdb seb

# installation de go
$ brew install mercurial go
# installation du plugin go dans IntelliJ IDEA CE 11
# installation de "Google Go Language"

# install mysql
$ brew install mysql
# create database
$ unset TMPDIR
$ mysql_install_db --verbose --user=seb --basedir="/usr/local/Cellar/mysql/5.5.20"
                   --datadir=/usr/local/var/mysql --tmpdir=/tmp
# sarting mysql
$ mysqld_safe & (or Ctlr+Z bg)
# init root password
$ mysqladmin -u root password
# stoping mysql
$ mysqladmin -u root -p shutdown

# install sonar
$ brew install sonar
  To have launchd start sonar at login:
      ln -sfv /usr/local/opt/sonar/*.plist ~/Library/LaunchAgents
  Then to load sonar now:
      launchctl load ~/Library/LaunchAgents/homebrew.mxcl.sonar.plist
  Or, if you don't want/need launchctl, you can just run:
      /usr/local/opt/sonar/bin/sonar console
$ cd /usr/local/Cellar/sonar/3.4.1
$ mysql -u root -p < extras/database/mysql/create_database.sql
$ vi conf/sonar.properties
  commenter l'url derby et décommenter l'url, le driverClassName et la validationQuery
$ bin/macosx-universal-64/sonar.sh start
# launch an analysis
$ mvn sonar:sonar -Djdbc:mysql://localhost:3306/sonar?useUnicode=true&characterEncoding=
#  or
        <profile>
            <id>sonar</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <sonar.jdbc.url>jdbc:mysql://localhost:3306/sonar?useUnicode=true&amp;characterEncoding=utf8</sonar.jdbc.url>
                <sonar.jdbc.driver>com.mysql.jdbc.Driver</sonar.jdbc.driver>
                <sonar.jdbc.username>sonar</sonar.jdbc.username>
                <sonar.jdbc.password>sonar</sonar.jdbc.password>
                <!-- La ligne ci-dessous n'est utile que si le port par défaut (9000) est modifié dans le fichier de configuration. -->
                <sonar.host.url>http://url-serveur:1234</sonar.host.url>
            </properties>
        </profile>
$ mvn sonar:sonar
# stopping sonar
$ cd /Applications/Java/sonar-2.13.1 ; bin/macosx-universal-64/sonar.sh stop

# install de jekyll
$ gem update --system
$ gem install jekyll

# install Pygments
$ sudo easy_install Pygments

# install Oracle jdk
# download and execute jdk-7u9-macosx-x64.dmg

# install git
$ sudo brew install git
  The OS X keychain credential helper has been installed to:
    /usr/local/bin/git-credential-osxkeychain
  The 'contrib' directory has been installed to:
    /usr/local/share/git-core/contrib
  Bash completion has been installed to:
    /usr/local/etc/bash_completion.d

# installation de ruby via rvm
$ curl -L get.rvm.io | bash -s stable
# Installing RVM to /Users/seb/.rvm/
#    Adding rvm PATH line to /Users/seb/.bashrc /Users/seb/.zshenv.
#    Adding rvm loading line to /Users/seb/.bash_profile /Users/seb/.zprofile.
# 
# Installation of RVM in /Users/seb/.rvm/ is almost complete:
# 
#   * To start using RVM you need to run `source /Users/seb/.rvm/scripts/rvm`
#     in all your open shell windows, in rare cases you need to reopen all shell windows.
$ rm .zshenv .zprofile
$ source ~/.rvm/scripts/rvm
$ vi ~/.bashrc
# merge previous PATH environment variable definition with $HOME/.rvm/bin

# install ruby
$ rvm install 1.9.3
  Fetching yaml-0.1.4.tar.gz to /Users/seb/.rvm/archives
  Extracting yaml-0.1.4.tar.gz to /Users/seb/.rvm/src
  Installing yaml to /Users/seb/.rvm/usr
  Installing Ruby from source to: /Users/seb/.rvm/rubies/ruby-1.9.3-p286
  ruby-1.9.3-p286 - #extracting ruby-1.9.3-p286 to /Users/seb/.rvm/src/ruby-1.9.3-p286
  Retrieving rubygems-1.8.24
  Installing rubygems-1.8.24 for ruby-1.9.3-p286 ...
  Saving wrappers to '/Users/seb/.rvm/bin'.
  ruby-1.9.3-p286 - #adjusting #shebangs for (gem irb erb ri rdoc testrb rake).
  ruby-1.9.3-p286 - #importing default gemsets (/Users/seb/.rvm/gemsets/)

# installation de extreme_startup
$ rvm install 1.9.2
# To use an RVM installed Ruby as default, instead of the system ruby:
# 
#     rvm install 1.8.7 # installs patch 357: closest supported version
#     rvm system ; rvm gemset export system.gems ; rvm 1.8.7 ; rvm gemset import system.gems # migrate your gems
#     rvm alias create default 1.8.7
$ gem install bundler
$ git clone git://github.com/rchatley/extreme_startup.git
$ cd extreme_startup
$ bundle install
$ ruby web_server.rb
# or
$ WARMUP=1 ruby web_server.rb

# maven initial

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId></groupId>
    <artifactId></artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>1.7</maven.compiler.source>
        <maven.compiler.target>1.7</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.easytesting</groupId>
            <artifactId>fest-assert</artifactId>
            <version>1.4</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>

# installation de scala
==> Downloading http://www.scala-lang.org/downloads/distrib/files/scala-2.9.2.tgz
######################################################################## 100,0%
==> Downloading https://raw.github.com/scala/scala-dist/27bc0c25145a83691e3678c7dda602e765e13413/completion.d/2.9.1/scala
######################################################################## 100,0%
==> Caveats
Bash completion has been installed to:
  /usr/local/etc/bash_completion.d
/usr/local/Cellar/scala/2.9.2: 38 files, 26M, built in 92 seconds

# intégration d'un projet de mower
$ cd ~/Documents/IdeaProjects/mowers
$ md5 -s 20120911FlorentDuveau
$ git subtree add --prefix=d7e45eb5e686a0fa1a3dd035ce97f4c6 git@github.com:FlorentD/MowItNow.git master
# into IntelliJ : File > Import Module...
# add dependency to test/pom.xml
# create class extends DefaultMowerAdapter or one of his child

# utilisation de locate
$ sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.locate.plist

# install node
$ brew install node
  We recommend prepending the following path to your PATH environment variable to have npm-installed binaries picked up:
    /usr/local/share/npm/bin
$ vi /etc/launchd.conf
  setenv PATH ...:/usr/local/share/npm/bin

# install node packages
$ npm install -g coffee-script zombie expect.js underscore promised-io mocha should

# processing
$ mkdir ~/Documents/Processing
$ cd ~/Documents/Processing
$ wget http://www.processing.org # processing-1.5.1-macosx.zip
$ unzip processing-1.5.1-macosx.zip -d /Applications
$ wget http://www.art-generatif.com # Generative-Design-Code-Package.zip
$ unzip Generative-Design-Code-Package.zip 
$ wget http://www.art-generatif.com # generativedesign.zip
$ unzip generativedesign.zip -d generativedesign
$ wget http://www.art-generatif.com # library.zip
$ wget http://www.art-generatif.com # geomerative-34.zip
$ wget http://www.art-generatif.com # controlP5.zip
# after updating java have to launch processing with arch
$ echo #!/bin/sh > ~/bin/processing
$ echo arch -i386 /Applications/Processing.app/Contents/MacOS/JavaApplicationStub >> ~/bin/processing
$ chmod u+x ~/bin/processing

# processing version 2
$ mkdir ~/Documents/Processing2
$ cd ~/Documents/Processing2
$ wget http://processing.googlecode.com/files/processing-2.0b3-macosx.zip

# suivi des liens symboliques par httpd
  <Directory "/Users/seb/Sites/">
    Options Indexes MultiViews FollowSymLinks
    AllowOverride Options
    Order allow,deny
    Allow from all
  </Directory>
$ chmod o+x targetPath

# installation de textmate
$ cd /Applications
$ wget https://github.com/downloads/textmate/textmate/TextMate_r9315.tbz
$ tar -xzvf TextMate_r9315.tbz

# affichage coloré de ls
$ vi ~/.bash_profile
  alias ls="ls -G"
$ source ~/.bash_profile

# upgrade java
# go to http://www.oracle.com/technetwork/java/javase/downloads
# get latest jdk-7u?-macosx-x64.dmg file
# mount dmg file by clicking on it
# double-click on auto installer from mounted dmg
# follow instructions
$ sudo rm -fr /Library/Java/JavaVirtualMachines/jdk1.7.0_?.jdk

# mongodb install
$ brew install mongodb
# To have launchd start mongodb at login:
#     ln -sfv /usr/local/opt/mongodb/*.plist ~/Library/LaunchAgents
# Then to load mongodb now:
#     launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mongodb.plist
# Or, if you don't want/need launchctl, you can just run:
#     mongod

# installing open jdk 8
# download jdk-8-ea-bin-b92-macosx-x86_64-30_may_2013.dmg from http://jdk8.java.net/download.html
# run dmg, double-click on icon and click next
# should install files to /Library/Java/JavaVirtualMachines/jdk1.8.0.jdk and copy as well to /System/Library/Frameworks/JavaVM.framework/Versions/A, link to binaries to /usr/bin

# force to use java 8 for one maven command
$ env JAVA_HOME=`/usr/libexec/java_home` mvn ...

# installing ruby
$ brew install ruby
  NOTE: By default, gem installed binaries will be placed into:
  /usr/local/opt/ruby/bin
$ vi /etc/launchd.conf
  setenv PATH ...:/usr/local/opt/ruby/bin
